generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String     @unique
  hashedPassword String?
  image          String?
  role           Role       @default(CUSTOMER)
  address        String?  
  phone          String?
  stripeCustomerId String?    // Stripe müşteri ID'si
  createdAt      DateTime   @default(now())
  comments       Comment[]
  activities     Activity[] // Kullanıcıya ait aktiviteler
  commentReports CommentReport[] // Kullanıcının yaptığı yoruml şikayetleri
  payments       Payment[]  // Kullanıcı ödemeleri
}

model Activity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  type        ActivityType
  referenceId String?  @db.ObjectId // İlgili modelin ID'si (Comment, Supplement vb.)
  productName String?
  description String
  date        DateTime @default(now())
  metadata    Json?    // Ekstra bilgiler için esnek alan
}

model Supplement {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  stock       Int       @default(0)
  imageUrl    String
  category    Category?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  comments    Comment[]
}

model Comment {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  supplement   Supplement @relation(fields: [supplementId], references: [id])
  supplementId String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.ObjectId
  content      String
  rating       Int       @default(5)
  createdAt    DateTime  @default(now())
  reportCount  Int       @default(0)
  reports      CommentReport[]
  isHidden     Boolean   @default(false)
}

model CommentReport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  reason    String?
  createdAt DateTime @default(now())

  @@unique([commentId, userId]) // Bir kullanıcı bir yorumu sadece bir kez şikayet edebilir
}

model BlogPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   // Blog başlığı
  slug        String   @unique // URL-friendly başlık (örn: kreatin-performans-risk)
  summary     String   // Önizleme açıklaması (kartta görünen kısa açıklama)
  content     String   // Tüm içerik (rich metin olarak kaydedilebilir)
  imageUrl    String?  // Karttaki görsel URL'si
  createdAt   DateTime @default(now()) // Yayınlanma tarihi
  authorId    String?  @db.ObjectId
}

model SiteSettings {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  siteName           String
  siteTitle          String
  siteDescription    String
  contactEmail       String
  contactPhone       String
  address            String
  logoUrl            String
  faviconUrl         String
  facebookUrl        String?
  instagramUrl       String?
  twitterUrl         String?
  youtubeUrl         String?
  linkedinUrl        String?
  enableRegistration Boolean  @default(true)
  enableGuestCheckout Boolean @default(true)
  shippingFee        Float    @default(20)
  taxRate            Float    @default(18)
  maintenanceMode    Boolean  @default(false)
  updatedAt          DateTime @default(now()) @updatedAt
}

enum Role {
  CUSTOMER
  DOCTOR
  ADMIN
}

enum ActivityType {
  PASSWORD_CHANGE
  PROFILE_UPDATE
  PHONE_UPDATE
  ADDRESS_UPDATE
  LOGIN
  LOGOUT
  ORDER_CREATE
  ORDER_CANCEL
  COMMENT_ADD
  COMMENT_EDIT
  COMMENT_DELETE
  PRODUCT_VIEW
}

enum Category {
  BRAIN
  WOMEN_HEALTH
  MENS_HEALTH
  HEART
  SLEEP
  ENERGY
}

// Ödeme kayıtları için model
model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.ObjectId
  amount          Float
  paymentIntentId String?  @unique
  status          String
  description     String?
  metadata        Json?
  createdAt       DateTime @default(now())
}